-- 1. Tạo Database
CREATE SCHEMA JAVA18_SHOPPING CHAR SET utf8mb4;
USE JAVA18_SHOPPING;

-- 2. Chọn thứ tự các bảng cần thực hiện

-- patchset1 --> PROVIDER, SIZE, ITEM_GROUP, ITEM, ITEM_DETAIL
-- create table provider
DROP TABLE IF EXISTS `PROVIDER`;
CREATE TABLE `PROVIDER`
(
	ID 			INT,
	`NAME` 		VARCHAR(100) NOT NULL,
    TAX_CODE 	VARCHAR(20) NOT NULL,
    ADDRESS 	TEXT NOT NULL,
    PHONE 		VARCHAR(20) NOT NULL,
    CONSTRAINT PK_PROVIDER PRIMARY KEY (ID)
);

-- create table size
DROP TABLE IF EXISTS `SIZE`;
CREATE TABLE `SIZE`
(
	ID 			VARCHAR(10),
    GENDER 		TINYINT NOT NULL , 
    `DESC` 		TEXT,
    CONSTRAINT PK_SIZE PRIMARY KEY (ID),
    CONSTRAINT CHK_SIZE_ID CHECK (ID IN ('S', 'M', 'L', 'XL', 'XXL', 'XXXL')),
    CONSTRAINT CHK_GENDER CHECK (GENDER IN (0, 1))
);

-- create table item_group
DROP TABLE IF EXISTS `ITEM_GROUP`;
CREATE TABLE `ITEM_GROUP`
(
	ID 		INT,
    `NAME` 	VARCHAR(100) NOT NULL
);

-- add pk, fk
ALTER TABLE `ITEM_GROUP`
ADD CONSTRAINT PK_ITEM_GROUP PRIMARY KEY (ID);

-- create table item
DROP TABLE IF EXISTS `ITEM`;
CREATE TABLE `ITEM`
(
	ID 				INT,
    `NAME` 			VARCHAR(100) NOT NULL,
    COLOR 			VARCHAR(100),
    MATERIAL 		VARCHAR(100),
    IMAGE_01 		VARCHAR(100),
    IMAGE_02 		VARCHAR(100),
    LAST_UPDATED_AT DATETIME DEFAULT CURRENT_TIMESTAMP(),
    ITEM_GROUP_ID 	INT NOT NULL,
    PROVIDER_ID 	INT NOT NULL,
    CONSTRAINT PK_ITEM PRIMARY KEY (ID),
    CONSTRAINT FK_ITEM_ITEM_GROUP FOREIGN KEY (ITEM_GROUP_ID) REFERENCES ITEM_GROUP(ID),
    CONSTRAINT FK_ITEM_PROVIDER FOREIGN KEY (PROVIDER_ID) REFERENCES PROVIDER(ID)
);
-- create table item_detail
DROP TABLE IF EXISTS `ITEM_DETAIL`;
CREATE TABLE `ITEM_DETAIL`
(
    AMOUNT 			INT NOT NULL,
    SELL_PRICE 		DOUBLE NOT NULL,
    BUY_PRICE 		DOUBLE NOT NULL,
    ITEM_ID 		INT,
    SIZE_ID 		VARCHAR(10),
    CONSTRAINT CHK_ITEM_DETAIL_SIZE_ID CHECK (SIZE_ID IN ('S', 'M', 'L', 'XL', 'XXL', 'XXXL')),
    CONSTRAINT FK_ITEM_DETAIL_ITEM FOREIGN KEY (ITEM_ID) REFERENCES ITEM(ID),
    CONSTRAINT FK_ITEM_DETAIL_SIZE FOREIGN KEY (SIZE_ID) REFERENCES SIZE(ID)
);

-- patchset2 --> DEPARTMENT, TITLE, EMPLOYEE, EMPLOYEE_DETAIL

-- create table department
DROP TABLE IF EXISTS `DEPARTMENT`;
CREATE TABLE `DEPARTMENT`
(
	ID 			INT,
    `NAME` 		VARCHAR(100) NOT NULL,
    CONSTRAINT PK_DEPARTMENT PRIMARY KEY (ID)
);

-- create table title
DROP TABLE IF EXISTS `TITLE`;
CREATE TABLE `TITLE`
(
	ID 			INT,
    `NAME` 		VARCHAR(100) 	NOT NULL,
    `DESC`	 	TEXT 			NOT NULL,
    STPEND 		DOUBLE 			NOT NULL,
    CONSTRAINT PK_TITLE PRIMARY KEY (ID)
);

-- create table employee
DROP TABLE IF EXISTS `EMPLOYEE`;
CREATE TABLE `EMPLOYEE`
(
	ID 				INT,
    `NAME` 			VARCHAR(100) 	NOT NULL,
    DATE_OF_BIRTH 	DATE 			NOT NULL,
    ADDRESS 		TEXT,
    PHONE 			VARCHAR(20),
    GENDER 			BIT 			NOT NULL,
    EMAIL 			VARCHAR(100) 	NOT NULL,
    `PASSWORD` 		VARCHAR(100) 	NOT NULL,
    DEPARTMENT_ID 	INT 			NOT NULL,
    -- CONSTRAINT CHK_EMPLOYEE_GENDER CHECK (GENDER IN (0, 1)),
    CONSTRAINT PK_EMPLOYEE PRIMARY KEY (ID),
    CONSTRAINT FK_EMPLOYEE_DEPARTMENT FOREIGN KEY (DEPARTMENT_ID) REFERENCES DEPARTMENT(ID)
);

-- create table employee_title
DROP TABLE IF EXISTS `EMPLOYEE_TITLE`;
CREATE TABLE `EMPLOYEE_TITLE`
(
	EMPLOYEE_ID 	INT,
    TITLE_ID 		INT,
    CONSTRAINT PK_EMPLOYEE_TITLE PRIMARY KEY (EMPLOYEE_ID, TITLE_ID),
    CONSTRAINT FK_EMPLOYEE_DETAIL_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(ID),
    CONSTRAINT FK_EMPLOYEE_DETAIL_TITLE FOREIGN KEY (TITLE_ID) REFERENCES TITLE(ID)
);


-- patchset3 --> CUSTOMER
-- create table customer
DROP TABLE IF EXISTS `CUSTOMER`;
CREATE TABLE `CUSTOMER`
(
	ID 				INT,
    `NAME` 			VARCHAR(100) 	NOT NULL,
    DATE_OF_BIRTH 	DATE 			NOT NULL,
    ADDRESS 		TEXT,
    PHONE 			VARCHAR(20),
    GENDER 			BIT,
    EMAIL 			VARCHAR(100) 	NOT NULL,
    `PASSWORD` 		VARCHAR(100) 	NOT NULL,
    -- CONSTRAINT CHK_CUSTOMER_GENDER CHECK (GENDER IN (0, 1)),
    CONSTRAINT PK_CUSTOMER PRIMARY KEY (ID)
);

-- patchset4 --> PAYMENT_METHOD, ORDER, ORDER_DETAIL
-- create table payment_method
DROP TABLE IF EXISTS `PAYMENT_METHOD`;
CREATE TABLE `PAYMENT_METHOD`
(
	ID 			INT,
    `DESC` 		VARCHAR(100)	NOT NULL,
    CONSTRAINT PK_PAYMENT_METHOD PRIMARY KEY (ID)
);

-- create table order
DROP TABLE IF EXISTS `ORDER`;
CREATE TABLE `ORDER`
(
	ID 					INT,
    DELIVERY_ADDRESS 	TEXT 		NOT NULL,
    TOTAL_FEE 			DOUBLE 		NOT NULL,
    DELIVERY_DATE 		DATE,
    DELIVERY_FEE 		DOUBLE,
    CREATED_AT 			DATETIME DEFAULT CURRENT_TIMESTAMP(),
    CUSTOMER_ID 		INT 		NOT NULL,
    PAYMENT_METHOD_ID 	INT			NOT NULL,
    CONSTRAINT PK_ORDER PRIMARY KEY (ID),
    CONSTRAINT FK_ORDER_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMER(ID),
    CONSTRAINT FK_ORDER_PAYMENT_METHOD FOREIGN KEY (PAYMENT_METHOD_ID) REFERENCES PAYMENT_METHOD(ID)
);

-- create table order_detail
DROP TABLE IF EXISTS `ORDER_DETAIL`;
CREATE TABLE `ORDER_DETAIL`
(
	AMOUNT 			INT 		NOT NULL,
	ORDER_ID 		INT,
    ITEM_ID 		INT,
    CONSTRAINT PK_ORDER_DETAIL PRIMARY KEY (ORDER_ID, ITEM_ID),
    CONSTRAINT FK_ORDER_DETAIL_ORDER FOREIGN KEY (ORDER_ID) REFERENCES `ORDER`(ID),
    CONSTRAINT FK_ORDER_DETAIL_ITEM FOREIGN KEY (ITEM_ID) REFERENCES ITEM(ID)
);

-- create table bill
DROP TABLE IF EXISTS `BILL`;
CREATE TABLE `BILL`
(
	ID 				INT,
    CREATED_AT 		DATETIME DEFAULT CURRENT_TIMESTAMP(),
    ORDER_ID 		INT 		NOT NULL,
    CONSTRAINT PK_BILL PRIMARY KEY (ID),
    CONSTRAINT UNIQUE_ORDER_ID UNIQUE (ORDER_ID)
    
);

-- patchset5 --> DELIVERY_STATUS, ORDER_DELIVERY_STATUS_DETAIL
-- create delivery_status
DROP TABLE IF EXISTS `DELIVERY_STATUS`;
CREATE TABLE `DELIVERY_STATUS`
(
	ID 				INT,
    `DESC` 			VARCHAR(100)	NOT NULL,
    CONSTRAINT PK_DELIVERY_STATUS PRIMARY KEY (ID)
);

-- create order_delivery_status_detail
DROP TABLE IF EXISTS `ORDER_DELIVERY_STATUS_DETAIL`;
CREATE TABLE `ORDER_DELIVERY_STATUS_DETAIL`
(
	LAST_UPDATED_AT 	DATETIME DEFAULT CURRENT_TIMESTAMP(),
    ORDER_ID 			INT,
    STATUS_ID 			INT,
    EMPLOYEE_ID 		INT 	NOT NULL,
    CONSTRAINT PK_ORDER_DELIVERY_STATUS_DETAIL PRIMARY KEY (ORDER_ID, STATUS_ID),
    CONSTRAINT FK_ORDER_DELIVERY_STATUS_DETAIL_ORDER FOREIGN KEY (ORDER_ID) REFERENCES `ORDER`(ID),
    CONSTRAINT FK_ORDER_DELIVERY_STATUS_DETAIL_DELIVERY_STATUS FOREIGN KEY (STATUS_ID) REFERENCES DELIVERY_STATUS(ID),
    CONSTRAINT FK_ORDER_DELIVERY_STATUS_DETAIL_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEE(ID)
);
